
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d60  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bb0  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000526  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000215c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005aa  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  000027a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  bc:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <DebugDiode_Init>:
/* Private function declaration ----------------------------------------------*/

/* Public functions definition -----------------------------------------------*/
void DebugDiode_Init(void)
{
	DDRD |= (1 << DDD0); // set pin 0 as Output (Arduino D3)
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	08 95       	ret

000000cc <DebugDiode_Write>:
}

void DebugDiode_Write(unsigned char high)
{
	if(high>0){
  cc:	88 23       	and	r24, r24
  ce:	21 f0       	breq	.+8      	; 0xd8 <DebugDiode_Write+0xc>
		// drive HIGH
		PORTD |= (1<<PORTD0);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	08 95       	ret
	}else{
		// drive LOW
		PORTD &= ~(1<<PORTD0);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	08 95       	ret

000000e0 <USART_Init>:
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) )
	;
	/* Get and return received data from buffer */
	return UDR1;
}
  e0:	dc 01       	movw	r26, r24
  e2:	cb 01       	movw	r24, r22
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	aa 1f       	adc	r26, r26
  ea:	bb 1f       	adc	r27, r27
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	aa 1f       	adc	r26, r26
  f2:	bb 1f       	adc	r27, r27
  f4:	9c 01       	movw	r18, r24
  f6:	ad 01       	movw	r20, r26
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	44 1f       	adc	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	44 1f       	adc	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	74 e2       	ldi	r23, 0x24	; 36
 10c:	84 ef       	ldi	r24, 0xF4	; 244
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 cf 00 	call	0x19e	; 0x19e <__udivmodsi4>
 114:	ba 01       	movw	r22, r20
 116:	a9 01       	movw	r20, r18
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	51 09       	sbc	r21, r1
 11c:	61 09       	sbc	r22, r1
 11e:	71 09       	sbc	r23, r1
 120:	bb 27       	eor	r27, r27
 122:	a7 2f       	mov	r26, r23
 124:	96 2f       	mov	r25, r22
 126:	85 2f       	mov	r24, r21
 128:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 12c:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 130:	88 e1       	ldi	r24, 0x18	; 24
 132:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 13c:	08 95       	ret

0000013e <USART_TransmitByte>:

void USART_TransmitByte( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
 13e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 142:	95 ff       	sbrs	r25, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <USART_TransmitByte>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 146:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 14a:	08 95       	ret

0000014c <main>:
#include "App/DebugDiode/Inc/DebugDiode.h"
#include "util/delay.h"

int main(void)
{
	USART_Init(9600);
 14c:	60 e8       	ldi	r22, 0x80	; 128
 14e:	75 e2       	ldi	r23, 0x25	; 37
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Init>
	DebugDiode_Init(); // pro micro D3 pin ( ATmega pin 0 of port D)
 158:	0e 94 62 00 	call	0xc4	; 0xc4 <DebugDiode_Init>
	
	unsigned char data = 'A';
 15c:	c1 e4       	ldi	r28, 0x41	; 65
	
	while(1){
		DebugDiode_Write(DIODE_HIGH);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 66 00 	call	0xcc	; 0xcc <DebugDiode_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	83 ed       	ldi	r24, 0xD3	; 211
 168:	90 e3       	ldi	r25, 0x30	; 48
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x1e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x28>
 174:	00 00       	nop
		_delay_ms(1000);
		
		// transmit next character
		USART_TransmitByte(data);
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <USART_TransmitByte>
		
		if(data == 'Z'){
 17c:	ca 35       	cpi	r28, 0x5A	; 90
 17e:	09 f4       	brne	.+2      	; 0x182 <main+0x36>
			data = 'A';
 180:	c1 e4       	ldi	r28, 0x41	; 65
		}
		
		data ++;
 182:	cf 5f       	subi	r28, 0xFF	; 255
		
		DebugDiode_Write(DIODE_LOW);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 66 00 	call	0xcc	; 0xcc <DebugDiode_Write>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	83 ed       	ldi	r24, 0xD3	; 211
 18e:	90 e3       	ldi	r25, 0x30	; 48
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x44>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x4e>
 19a:	00 00       	nop
 19c:	e0 cf       	rjmp	.-64     	; 0x15e <main+0x12>

0000019e <__udivmodsi4>:
 19e:	a1 e2       	ldi	r26, 0x21	; 33
 1a0:	1a 2e       	mov	r1, r26
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	fd 01       	movw	r30, r26
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <__udivmodsi4_ep>

000001aa <__udivmodsi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	ee 1f       	adc	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	a2 17       	cp	r26, r18
 1b4:	b3 07       	cpc	r27, r19
 1b6:	e4 07       	cpc	r30, r20
 1b8:	f5 07       	cpc	r31, r21
 1ba:	20 f0       	brcs	.+8      	; 0x1c4 <__udivmodsi4_ep>
 1bc:	a2 1b       	sub	r26, r18
 1be:	b3 0b       	sbc	r27, r19
 1c0:	e4 0b       	sbc	r30, r20
 1c2:	f5 0b       	sbc	r31, r21

000001c4 <__udivmodsi4_ep>:
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a 94       	dec	r1
 1ce:	69 f7       	brne	.-38     	; 0x1aa <__udivmodsi4_loop>
 1d0:	60 95       	com	r22
 1d2:	70 95       	com	r23
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	bd 01       	movw	r22, r26
 1de:	cf 01       	movw	r24, r30
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
